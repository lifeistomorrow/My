(1)onPause()：
一般建议执行操作：
1.0.1：停止动画或者是其他正在运行的操作，那些都会导致CPU的浪费.
1.0.2：提交在用户离开时期待保存的内容(例如邮件草稿).
1.0.3：释放系统资源，例如broadcast receivers, sensors (比如GPS), 或者是其他任何会影响到电量的资源。
(1.1)Warning:
不应该使用onPause()来保存用户改变的数据 (例如填入表格中的个人信息) 到永久存储(File或者DB)上。
仅仅当确认用户期待那些改变能够被自动保存的时候(例如正在撰写邮件草稿)，才把那些数据存到永久存储 。
但是，我们应该避免在onPause()时执行CPU-intensive 的工作，例如写数据到DB，
因为它会导致切换到下一个activity变得缓慢(应该把那些heavy-load的工作放到onStop()去做)。
如果activity实际上是要被Stop，那么我们应该为了切换的顺畅而减少在OnPause()方法里面的工作量。
(1.2)Note:
当activity处于暂停状态，Activity.html” target=”_blank”>Activity实例是驻留在内存中的，
并且在activity 恢复的时候重新调用。我们不需要在恢复到Resumed状态的一系列回调方法中重新初始化组件。

(2)onResume():
Warning:系统每次调用这个方法时，activity都处于前台，包括第一次创建的时候。
所以，应该实现onResume()来初始化那些在onPause方法里面释放掉的组件，
并执行那些activity每次进入Resumed state都需要的初始化动作 
(例如开始动画与初始化那些只有在获取用户焦点时才需要的组件)。

（3）onStop():
onStop()方法应该做清除所有activity资源的操作。
Warinig:当activity调用onStop()方法, activity不再可见，并且应该释放那些不再需要的所有资源。
一旦activity停止了，系统会在需要内存空间时摧毁它的实例(和栈结构有关，通常back操作会导致前一个activity被销毁)。
极端情况下，系统会直接杀死我们的app进程，并不执行activity的onDestroy()回调方法, 因此我们需要使用onStop()来释放资源，从而避免内存泄漏。
尽管onPause()方法是在onStop()之前调用，我们应该使用onStop()来执行那些CPU intensive的shut-down操作，例如往数据库写信息。

（4）保存Activity状态onSaveInstanceState()和恢复Activity状态onRestoreInstanceState()在onStart()方法后执行.
